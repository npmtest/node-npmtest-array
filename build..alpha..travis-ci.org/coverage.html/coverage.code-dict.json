{"/home/travis/build/npmtest/node-npmtest-array/test.js":"/* istanbul instrument in package npmtest_array */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-array/lib.npmtest_array.js":"/* istanbul instrument in package npmtest_array */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_array = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_array = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-array/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-array && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_array */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_array\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_array.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_array.rollup.js'] =\n            local.assetsDict['/assets.npmtest_array.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_array.__dirname +\n                    '/lib.npmtest_array.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-array/node_modules/array/index.js":"module.exports = require('./lib/array');\n","/home/travis/build/npmtest/node-npmtest-array/node_modules/array/lib/array.js":"/**\n * Module dependencies\n */\n\nvar Enumerable = require('./enumerable');\nvar proto = Array.prototype;\nvar isArray = Array.isArray || require('isArray');\n\ntry {\n  var Emitter = require('emitter');\n} catch(e) {\n  var Emitter = require('emitter-component');\n}\n\n/*\n * Expose `array`\n */\n\nmodule.exports = array;\n\n/**\n * Initialize `array`\n *\n * @param {Array|Object|Undefined} arr\n * @return {array}\n * @api public\n */\n\nfunction array(arr) {\n  if(!(this instanceof array)) return new array(arr);\n  arr = arr || [];\n\n  if (isArray(arr)) {\n    // create array-like object\n    var len = this.length = arr.length;\n    for(var i = 0; i < len; i++) this[i] = arr[i];\n  } else if ('object' == typeof arr) {\n    if (isObjectLiteral(arr)) {\n      arr._ctx = this._ctx = JSON.parse(JSON.stringify(arr));\n    }\n\n    // mixin to another object\n    for(var key in array.prototype) arr[key] = array.prototype[key];\n    return arr;\n  }\n}\n\n/**\n * Mixin `Emitter`\n */\n\nEmitter(array.prototype);\n\n/**\n * Mixin `Enumerable`\n */\n\nEnumerable(array.prototype);\n\n/**\n * Removes the last element from an array and returns that element\n *\n * @return {Mixed} removed element\n * @api public\n */\n\narray.prototype.pop = function() {\n  var ret = proto.pop.apply(this, arguments);\n  this.emit('remove', ret, this.length);\n  this.emit('change');\n  return ret;\n};\n\n/**\n * Push a value onto the end of the array,\n * returning the length of the array\n *\n * @param {Mixed, ...} elements\n * @return {Number}\n * @api public\n */\n\narray.prototype.push = function() {\n  var ret = proto.push.apply(this, arguments),\n      args = [].slice.call(arguments);\n  for(var i = 0, len = args.length; i < len; i++) this.emit('add', args[i], ret - len + i);\n  this.emit('change');\n  return ret;\n};\n\n/**\n * Removes the first element from an array and returns that element.\n *\n * @return {Mixed}\n * @api public\n */\n\narray.prototype.shift = function() {\n  var ret = proto.shift.apply(this, arguments);\n  this.emit('remove', ret, 0);\n  this.emit('change');\n  return ret;\n};\n\n/**\n * Adds and/or removes elements from an array.\n *\n * @param {Number} index\n * @param {Number} howMany\n * @param {Mixed, ...} elements\n * @return {Array} removed elements\n * @api public\n */\n\narray.prototype.splice = function(index) {\n  var ret = proto.splice.apply(this, arguments),\n      added = [].slice.call(arguments, 2);\n  for(var i = 0, len = ret.length; i < len; i++) this.emit('remove', ret[i], index);\n  for(    i = 0, len = added.length; i < len; i++) this.emit('add', added[i], index + i);\n  this.emit('change');\n  return ret;\n};\n\n/**\n * Adds one or more elements to the front of an array\n * and returns the new length of the array.\n *\n * @param {Mixed, ...} elements\n * @return {Number} length\n * @api public\n */\n\narray.prototype.unshift = function() {\n  var ret = proto.unshift.apply(this, arguments),\n      args = [].slice.call(arguments);\n  for(var i = 0, len = args.length; i < len; i++) this.emit('add', args[i], i);\n  this.emit('change');\n  return ret;\n};\n\n/**\n * Reverses the array, emitting the `reverse` event\n *\n * @api public\n */\n\narray.prototype.reverse = function () {\n  var ret = proto.reverse.apply(this, arguments);\n  this.emit('reverse');\n  this.emit('change');\n  return ret;\n};\n\n/**\n * Sort the array, emitting the `sort` event\n *\n * With strings:\n *\n *   fruits.sort('calories')\n *\n * Descending sort:\n *\n *   fruits.sort('calories', 'desc')\n *\n * @param {undefined|Function|String} fn\n * @param {Nunber|String|Boolean} dir\n * @return {Array}\n * @api public\n */\nvar sort = array.prototype.sort;\narray.prototype.sort = function () {\n  var ret = sort.apply(this, arguments);\n  this.emit('sort');\n  this.emit('change');\n  return ret;\n}\n\n\n/**\n * toJSON\n *\n * @return {Object}\n * @api public\n */\n\narray.prototype.toJSON = function() {\n  return this.map(function(obj) {\n    return (obj.toJSON) ? obj.toJSON() : obj;\n  }).toArray();\n}\n\n/**\n * Convert the array-like object to an actual array\n *\n * @return {Array}\n * @api public\n */\n\narray.prototype.toArray  = function() {\n  return proto.slice.call(this);\n};\n\n/**\n * Static: get the array item\n *\n * @param {Mixed} obj\n * @return {Mixed}\n * @api public\n */\n\narray.get = function(obj) {\n  return obj;\n};\n\n/**\n * Get the array item\n *\n * @param {Number} i\n * @return {Mixed}\n * @api public\n */\n\narray.prototype.get = array.get;\n\n/**\n * Attach the rest of the array methods\n */\n\nvar methods = ['toString', 'concat', 'join', 'slice'];\n\nmethods.forEach(function(method) {\n  array.prototype[method] = function() {\n    return proto[method].apply(this, arguments);\n  };\n});\n\n/**\n * Remake the array, emptying it, then adding values back in\n *\n * @api private\n */\n\narray.prototype._remake = function(arr) {\n  var construct = this.constructor;\n  var clone = (this._ctx) ? new construct(this._ctx) : new construct();\n  proto.push.apply(clone, arr);\n  clone.get = this.get || array.get;\n  return clone;\n};\n\n/**\n * Is object utility\n *\n * @param {Mixed} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObjectLiteral(obj) {\n  return obj.constructor == Object;\n}\n","/home/travis/build/npmtest/node-npmtest-array/node_modules/array/lib/enumerable.js":"/**\n * Module Dependencies\n */\n\nvar toFunction = require('to-function'),\n    proto = Array.prototype,\n    enumerable = {};\n\n/**\n * Mixin to `obj`.\n *\n *    var Enumerable = require('enumerable');\n *    Enumerable(Something.prototype);\n *\n * @param {Object} obj\n * @return {Object} obj\n * @api private\n */\n\nmodule.exports = function(obj) {\n  for(var key in enumerable) obj[key] = enumerable[key];\n  return obj;\n};\n\n/**\n * Iterate each value and invoke `fn(val, i)`.\n *\n *    users.each(function(val, i){\n *\n *    })\n *\n * @param {Function} fn\n * @return {Object} self\n * @api public\n */\n\nenumerable.forEach =\nenumerable.each = function(fn){\n  var arr = this,\n      len = arr.length;\n\n  for (var i = 0; i < len; i++) {\n    fn(arr[i], i);\n  }\n\n  return this;\n};\n\n/**\n * Map each return value from `fn(val, i)`.\n *\n * Passing a callback function:\n *\n *    users.map(function(user){\n *      return user.name.first\n *    })\n *\n * Passing a property string:\n *\n *    users.map('name.first')\n *\n * @param {Function} fn\n * @return {Enumerable}\n * @api public\n */\n\nenumerable.map = function(fn){\n  fn = toFunction(fn);\n  var out = [],\n      arr = this,\n      len = arr.length;\n\n  for (var i = 0; i < len; ++i) {\n    out.push(fn(arr.get(arr[i]), i));\n  }\n\n  return this._remake(out);\n};\n\n/**\n * Select all values that return a truthy value of `fn(val, i)`.\n *\n *    users.select(function(user){\n *      return user.age > 20\n *    })\n *\n *  With a property:\n *\n *    items.select('complete')\n *\n * @param {Function|String} fn\n * @return {Enumerable}\n * @api public\n */\n\nenumerable.filter =\nenumerable.select = function(fn){\n  fn = toFunction(fn);\n  var out = [],\n      arr = this,\n      len = arr.length,\n      val;\n\n  for (var i = 0; i < len; ++i) {\n    val = arr.get(arr[i]);\n    if (fn(val, i)) out.push(arr[i]);\n  }\n\n  return this._remake(out);\n};\n\n/**\n * Select all unique values.\n *\n *    nums.unique()\n *\n * @param {Function|String} fn\n * @return {Enumerable}\n * @api public\n */\n\nenumerable.unique = function(fn){\n  var out = [],\n      vals = [],\n      arr = this,\n      len = arr.length,\n      val;\n\n  fn = (fn) ? toFunction(fn) : function(o) { return o; };\n\n  for (var i = 0; i < len; ++i) {\n    val = fn(arr.get(arr[i]));\n    if (~vals.indexOf(val)) continue;\n    vals.push(val);\n    out.push(arr[i]);\n  }\n\n  return this._remake(out);\n};\n\n/**\n * Reject all values that return a truthy value of `fn(val, i)`.\n *\n * Rejecting using a callback:\n *\n *    users.reject(function(user){\n *      return user.age < 20\n *    })\n *\n * Rejecting with a property:\n *\n *    items.reject('complete')\n *\n * Rejecting values via `==`:\n *\n *    data.reject(null)\n *    users.reject(tobi)\n *\n * @param {Function|String|Mixed} fn\n * @return {Enumerable}\n * @api public\n */\n\nenumerable.reject = function(fn){\n  var out = [],\n      arr = this,\n      len = arr.length,\n      val, i;\n\n  if ('string' == typeof fn) fn = toFunction(fn);\n  if (fn) {\n    for (i = 0; i < len; ++i) {\n      val = arr.get(arr[i]);\n      if (!fn(val, i)) out.push(arr[i]);\n    }\n  } else {\n    for (i = 0; i < len; ++i) {\n      val = arr.get(arr[i]);\n      if (val != fn) out.push(arr[i]);\n    }\n  }\n\n  return this._remake(out);\n};\n\n/**\n * Reject `null` and `undefined`.\n *\n *    [1, null, 5, undefined].compact()\n *    // => [1,5]\n *\n * @return {Enumerable}\n * @api public\n */\n\n\nenumerable.compact = function(){\n  return this.reject(null);\n};\n\n/**\n * Return the first value when `fn(val, i)` is truthy,\n * otherwise return `undefined`.\n *\n *    users.find(function(user){\n *      return user.role == 'admin'\n *    })\n *\n * With a property string:\n *\n *    users.find('age > 20')\n *\n * @param {Function|String} fn\n * @return {Mixed}\n * @api public\n */\n\nenumerable.find = function(fn){\n  fn = toFunction(fn);\n  var arr = this,\n      len = arr.length,\n      val;\n\n  for (var i = 0; i < len; ++i) {\n    val = arr.get(arr[i]);\n    if (fn(val, i)) return arr[i];\n  }\n};\n\n/**\n * Return the last value when `fn(val, i)` is truthy,\n * otherwise return `undefined`.\n *\n *    users.findLast(function(user){\n *      return user.role == 'admin'\n *    })\n *\n * @param {Function} fn\n * @return {Mixed}\n * @api public\n */\n\nenumerable.findLast = function (fn) {\n    fn = toFunction(fn);\n  var arr = this,\n  i = arr.length;\n\n  while(i--) if (fn(arr.get(arr[i]), i)) return arr[i];\n};\n\n/**\n * Assert that all invocations of `fn(val, i)` are truthy.\n *\n * For example ensuring that all pets are ferrets:\n *\n *    pets.all(function(pet){\n *      return pet.species == 'ferret'\n *    })\n *\n *    users.all('admin')\n *\n * @param {Function|String} fn\n * @return {Boolean}\n * @api public\n */\n\nenumerable.every = function(fn){\n  fn = toFunction(fn);\n  var arr = this,\n      len = arr.length,\n      val;\n\n  for (var i = 0; i < len; ++i) {\n    val = arr.get(arr[i]);\n    if (!fn(val, i)) return false;\n  }\n\n  return true;\n};\n\n/**\n * Assert that none of the invocations of `fn(val, i)` are truthy.\n *\n * For example ensuring that no pets are admins:\n *\n *    pets.none(function(p){ return p.admin })\n *    pets.none('admin')\n *\n * @param {Function|String} fn\n * @return {Boolean}\n * @api public\n */\n\nenumerable.none = function(fn){\n  fn = toFunction(fn);\n  var arr = this,\n      len = arr.length,\n      val;\n\n  for (var i = 0; i < len; ++i) {\n    val = arr.get(arr[i]);\n    if (fn(val, i)) return false;\n  }\n  return true;\n};\n\n/**\n * Assert that at least one invocation of `fn(val, i)` is truthy.\n *\n * For example checking to see if any pets are ferrets:\n *\n *    pets.any(function(pet){\n *      return pet.species == 'ferret'\n *    })\n *\n * @param {Function} fn\n * @return {Boolean}\n * @api public\n */\n\nenumerable.any = function(fn){\n  fn = toFunction(fn);\n  var arr = this,\n      len = arr.length,\n      val;\n\n  for (var i = 0; i < len; ++i) {\n    val = arr.get(arr[i]);\n    if (fn(val, i)) return true;\n  }\n  return false;\n};\n\n/**\n * Count the number of times `fn(val, i)` returns true.\n *\n *    var n = pets.count(function(pet){\n *      return pet.species == 'ferret'\n *    })\n *\n * @param {Function} fn\n * @return {Number}\n * @api public\n */\n\nenumerable.count = function(fn){\n  fn = toFunction(fn);\n  var n = 0,\n      arr = this,\n      len = arr.length,\n      val;\n\n  if(!fn) return len;\n\n  for (var i = 0; i < len; ++i) {\n    val = arr.get(arr[i]);\n    if (fn(val, i)) ++n;\n  }\n  return n;\n};\n\n/**\n * Determine the indexof `obj` or return `-1`.\n *\n * @param {Mixed} obj\n * @return {Number}\n * @api public\n */\n\nenumerable.indexOf = function(obj) {\n  var arr = this,\n      len = arr.length,\n      val;\n\n  for (var i = 0; i < len; ++i) {\n    val = arr.get(arr[i]);\n    if (val === obj) return i;\n  }\n\n  return -1;\n};\n\n/**\n * Determine the last indexof `obj` or return `-1`.\n *\n * @param {Mixed} obj\n * @return {Number}\n * @api public\n */\n\nenumerable.lastIndexOf = function(obj) {\n  var arr = this,\n      len = arr.length,\n      val;\n\n  for (var i = --len; i >= 0; --i) {\n    val = arr.get(arr[i]);\n    if (val === obj) return i;\n  }\n\n  return -1;\n};\n\n/**\n * Check if `obj` is present in this enumerable.\n *\n * @param {Mixed} obj\n * @return {Boolean}\n * @api public\n */\n\nenumerable.has = function(obj) {\n  return !! ~this.indexOf(obj);\n};\n\n/**\n * Reduce with `fn(accumulator, val, i)` using\n * optional `init` value defaulting to the first\n * enumerable value.\n *\n * @param {Function} fn\n * @param {Mixed} [val]\n * @return {Mixed}\n * @api public\n */\n\nenumerable.reduce = function(fn, init){\n  var arr = this,\n      len = arr.length,\n      i = 0,\n      val;\n\n  val = null == init\n    ? arr.get(i++)\n    : init;\n\n  for (; i < len; ++i) {\n    val = fn(val, arr.get(arr[i]), i);\n  }\n\n  return val;\n};\n\n\n/**\n * Determine the max value.\n *\n * With a callback function:\n *\n *    pets.max(function(pet){\n *      return pet.age\n *    })\n *\n * With property strings:\n *\n *    pets.max('age')\n *\n * With immediate values:\n *\n *    nums.max()\n *\n * @param {Function|String} fn\n * @return {Number}\n * @api public\n */\n\nenumerable.max = function(fn){\n  var arr = this,\n      len = arr.length,\n      max = -Infinity,\n      n = 0,\n      val, i;\n\n  if (fn) {\n    fn = toFunction(fn);\n    for (i = 0; i < len; ++i) {\n      n = fn(arr.get(arr[i]), i);\n      max = n > max ? n : max;\n    }\n  } else {\n    for (i = 0; i < len; ++i) {\n      n = arr.get(arr[i]);\n      max = n > max ? n : max;\n    }\n  }\n\n  return max;\n};\n\n/**\n * Determine the min value.\n *\n * With a callback function:\n *\n *    pets.min(function(pet){\n *      return pet.age\n *    })\n *\n * With property strings:\n *\n *    pets.min('age')\n *\n * With immediate values:\n *\n *    nums.min()\n *\n * @param {Function|String} fn\n * @return {Number}\n * @api public\n */\n\nenumerable.min = function(fn){\n  var arr = this,\n      len = arr.length,\n      min = Infinity,\n      n = 0,\n      val, i;\n\n  if (fn) {\n    fn = toFunction(fn);\n    for (i = 0; i < len; ++i) {\n      n = fn(arr.get(arr[i]), i);\n      min = n < min ? n : min;\n    }\n  } else {\n    for (i = 0; i < len; ++i) {\n      n = arr.get(arr[i]);\n      min = n < min ? n : min;\n    }\n  }\n\n  return min;\n};\n\n/**\n * Determine the sum.\n *\n * With a callback function:\n *\n *    pets.sum(function(pet){\n *      return pet.age\n *    })\n *\n * With property strings:\n *\n *    pets.sum('age')\n *\n * With immediate values:\n *\n *    nums.sum()\n *\n * @param {Function|String} fn\n * @return {Number}\n * @api public\n */\n\nenumerable.sum = function(fn){\n  var arr = this,\n      len = arr.length,\n      n = 0,\n      val, i;\n\n  if (fn) {\n    fn = toFunction(fn);\n    for (i = 0; i < len; ++i) {\n      n += fn(arr.get(arr[i]), i);\n    }\n  } else {\n    for (i = 0; i < len; ++i) {\n      n += arr.get(arr[i]);\n    }\n  }\n\n  return n;\n};\n\n/**\n * Determine the average value.\n *\n * With a callback function:\n *\n *    pets.avg(function(pet){\n *      return pet.age\n *    })\n *\n * With property strings:\n *\n *    pets.avg('age')\n *\n * With immediate values:\n *\n *    nums.avg()\n *\n * @param {Function|String} fn\n * @return {Number}\n * @api public\n */\n\nenumerable.avg =\nenumerable.mean = function(fn){\n  var arr = this,\n      len = arr.length,\n      n = 0,\n      val, i;\n\n  if (fn) {\n    fn = toFunction(fn);\n    for (i = 0; i < len; ++i) {\n      n += fn(arr.get(arr[i]), i);\n    }\n  } else {\n    for (i = 0; i < len; ++i) {\n      n += arr.get(arr[i]);\n    }\n  }\n\n  return n / len;\n};\n\n/**\n * Return the first value, or first `n` values.\n *\n * @param {Number|Function} [n]\n * @return {Array|Mixed}\n * @api public\n */\n\nenumerable.first = function(n) {\n  var arr = this;\n\n  if(!n) return arr[0];\n  else if ('number' !== typeof n) return this.find(n);\n\n  var len = Math.min(n, arr.length),\n      out = new Array(len);\n\n  for (var i = 0; i < len; ++i) {\n    out[i] = arr[i];\n  }\n\n  return out;\n\n};\n\n/**\n * Return the last value, or last `n` values.\n *\n * @param {Number|Function} [n]\n * @return {Array|Mixed}\n * @api public\n */\n\nenumerable.last = function(n){\n  var arr = this,\n      len = arr.length;\n\n  if(!n) return arr[len - 1];\n  else if ('number' !== typeof n) return this.findLast(n);\n\n  var i = Math.max(0, len - n),\n      out = [];\n\n  for (; i < len; ++i) {\n    out.push(arr[i]);\n  }\n\n  return out;\n};\n\n/**\n * Create a hash from a given `key`\n *\n * @param {String} key\n * @return {Object}\n * @api public\n */\n\nenumerable.hash = function(str) {\n  var arr = this,\n      len = arr.length,\n      out = {},\n      key;\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    key = arr.get(arr[i])[str];\n    // TODO: assess, maybe we want out[i] = arr.get(i)\n    if(!key) continue;\n    out[key] = arr[i];\n  };\n\n  return out;\n};\n\n/**\n * Sort the array.\n *\n * With strings:\n *\n *   fruits.sort('calories')\n *\n * Descending sort:\n *\n *   fruits.sort('calories', 'desc')\n *\n * @param {undefined|Function|String} fn\n * @param {Nunber|String|Boolean} dir\n * @return {Array}\n * @api public\n */\n\nenumerable.sort = function(fn, dir) {\n  dir = (dir !== undefined) ? dir : 1;\n  var sort = proto.sort;\n  if(!fn) return sort.apply(this);\n  else if('function' == typeof fn) return sort.apply(this, arguments);\n\n  var self = this;\n  fn = toFunction(fn);\n\n  // support ascending and descending directions\n  if('string' == typeof dir) {\n    if(/asc/.test(dir)) dir = 1;\n    else if(/des/.test(dir)) dir = -1;\n  } else if('boolean' == typeof dir) {\n    dir = (dir) ? 1 : -1;\n  }\n\n  function compare(a, b) {\n    a = fn(self.get(a)), b = fn(self.get(b));\n    if(a < b) return -(dir);\n    else if(a > b) return dir;\n    return 0\n  };\n\n  return sort.call(this, compare);\n};\n"}